import { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";


interface SectionProps {
  id: string;
}

const CalculatorSection: React.FC<SectionProps> = ({ id }) => {
  const [objectType, setObjectType] = useState("commercial");
  const [area, setArea] = useState<number | string>('');
  const [material, setMaterial] = useState("standard");
  const [workType, setWorkType] = useState("build_only");
  const [complexity, setComplexity] = useState("standard");
  const [options, setOptions] = useState({
    architecture: false,
    engineering: false,
    insulation: false,
    landscaping: false,
    support: false,
  });
  const [result, setResult] = useState<number | null>(null);

  const calculateCost = () => {
      const numericArea = Number(area);
      if (isNaN(numericArea) || numericArea <= 0) {
        setResult(null);
        alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –ø–ª–æ—â—É."); 
        return;
      }
      let baseRate = 0;
      switch (objectType) {
          case "commercial": baseRate = 7500; break;
          case "private": baseRate = 6500; break;
          case "industrial": baseRate = 8000; break;
          case "pavilion": baseRate = 6000; break;
          case "sports": baseRate = 8500; break;
          default: baseRate = 7000;
      }
      switch (material) {
        case "basic": baseRate *= 0.8; break;
        case "standard": baseRate *= 1.0; break;
        case "premium": baseRate *= 1.3; break;
      }
      if (workType === "project_build") baseRate *= 1.2;
      if (workType === "turnkey") baseRate *= 1.5;
      if (complexity === "medium") baseRate *= 1.1;
      if (complexity === "high") baseRate *= 1.25;
      let optionalCost = 0;
      if (options.architecture) optionalCost += numericArea * 300;
      if (options.engineering) optionalCost += numericArea * 400;
      if (options.insulation) optionalCost += numericArea * 250;
      if (options.landscaping) optionalCost += numericArea * 150;
      if (options.support) optionalCost += 5000;
      const totalCost = (numericArea * baseRate) + optionalCost;
      setResult(totalCost);
  };

  const handleOptionChange = (optionName: keyof typeof options) => {
      setOptions(prev => ({ ...prev, [optionName]: !prev[optionName] }));
  };

  return (
    <section id={id} className="py-16 px-4 bg-gray-100">
      <div className="container mx-auto flex flex-col items-center">
        <h2 className="text-3xl font-bold text-center mb-4">üßÆ –ë—É–¥—ñ–≤–µ–ª—å–Ω–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤—ñ–¥ TERENTIEV Co</h2>
        <p className="text-center text-gray-600 mb-10 max-w-2xl">
          –û—Ç—Ä–∏–º–∞–π—Ç–µ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –æ—Ü—ñ–Ω–∫—É –≤–∞—Ä—Ç–æ—Å—Ç—ñ –≤–∞—à–æ–≥–æ –±—É–¥—ñ–≤–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É. –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ –Ω–∏–∂—á–µ.
        </p>

        <Card className="w-full max-w-3xl p-6 md:p-8 shadow-xl">
          <CardContent className="space-y-6">

            <div>
              <Label className="text-lg font-semibold block mb-3">–ö—Ä–æ–∫ 1: –í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ–±‚Äô—î–∫—Ç–∞</Label>
              <Select value={objectType} onValueChange={setObjectType}>
                <SelectTrigger><SelectValue placeholder="–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø..." /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="commercial">üè¢ –ö–æ–º–µ—Ä—Ü—ñ–π–Ω–∞ –±—É–¥—ñ–≤–ª—è</SelectItem>
                  <SelectItem value="private">üè† –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –±—É–¥–∏–Ω–æ–∫</SelectItem>
                  <SelectItem value="industrial">üè≠ –ü—Ä–æ–º–∏—Å–ª–æ–≤–∏–π –æ–±‚Äô—î–∫—Ç</SelectItem>
                  <SelectItem value="pavilion">üè™ –¢–æ—Ä–≥–æ–≤–∏–π –ø–∞–≤—ñ–ª—å–π–æ–Ω</SelectItem>
                  <SelectItem value="sports">üèó –°–ø–æ—Ä—Ç–∏–≤–Ω–∞ —Å–ø–æ—Ä—É–¥–∞</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
                <Label className="text-lg font-semibold block mb-3">–ö—Ä–æ–∫ 2: –í–∫–∞–∂—ñ—Ç—å –æ—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏</Label>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="area">üìè –ü–ª–æ—â–∞ –æ–±‚Äô—î–∫—Ç–∞ (–º¬≤)</Label>
                      <Input id="area" type="number" placeholder="–Ω–∞–ø—Ä., 100" value={area} onChange={(e) => setArea(e.target.value)} />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="material">üß± –¢–∏–ø –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤</Label>
                      <Select value={material} onValueChange={setMaterial}>
                        <SelectTrigger id="material"><SelectValue /></SelectTrigger>
                        <SelectContent>
                          <SelectItem value="basic">–ë–∞–∑–æ–≤—ñ</SelectItem>
                          <SelectItem value="standard">–°–µ—Ä–µ–¥–Ω—ñ–π –∫–ª–∞—Å</SelectItem>
                          <SelectItem value="premium">–ü—Ä–µ–º—ñ—É–º</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="workType">üîß –ö–æ–º–ø–ª–µ–∫—Å —Ä–æ–±—ñ—Ç</Label>
                      <Select value={workType} onValueChange={setWorkType}>
                        <SelectTrigger id="workType"><SelectValue /></SelectTrigger>
                        <SelectContent>
                          <SelectItem value="build_only">–õ–∏—à–µ –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ</SelectItem>
                          <SelectItem value="project_build">–ü—Ä–æ—î–∫—Ç + –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ</SelectItem>
                          <SelectItem value="turnkey">–ü—ñ–¥ –∫–ª—é—á (–∑ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–º –æ–∑–¥–æ–±–ª–µ–Ω–Ω—è–º)</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="complexity">‚öôÔ∏è –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –ø—Ä–æ—î–∫—Ç—É</Label>
                      <Select value={complexity} onValueChange={setComplexity}>
                        <SelectTrigger id="complexity"><SelectValue /></SelectTrigger>
                        <SelectContent>
                          <SelectItem value="standard">–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞</SelectItem>
                          <SelectItem value="medium">–°–µ—Ä–µ–¥–Ω—è</SelectItem>
                          <SelectItem value="high">–í–∏—Å–æ–∫–∞</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                </div>
            </div>

            <div>
                <Label className="text-lg font-semibold block mb-3">–ö—Ä–æ–∫ 3: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó (–∑–∞ –±–∞–∂–∞–Ω–Ω—è–º)</Label>
                <div className="space-y-3">
                   <div className="flex items-center space-x-2">
                     <Checkbox id="architecture" checked={options.architecture} onCheckedChange={() => handleOptionChange('architecture')} />
                     <Label htmlFor="architecture">‚úÖ –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–Ω–∏–π –ø—Ä–æ—î–∫—Ç</Label>
                   </div>
                   <div className="flex items-center space-x-2">
                     <Checkbox id="engineering" checked={options.engineering} onCheckedChange={() => handleOptionChange('engineering')} />
                     <Label htmlFor="engineering">‚úÖ –Ü–Ω–∂–µ–Ω–µ—Ä–Ω—ñ –º–µ—Ä–µ–∂—ñ (–µ–ª–µ–∫—Ç—Ä–∏–∫–∞, –≤–æ–¥–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è)</Label>
                   </div>
                    <div className="flex items-center space-x-2">
                     <Checkbox id="insulation" checked={options.insulation} onCheckedChange={() => handleOptionChange('insulation')} />
                     <Label htmlFor="insulation">‚úÖ –£—Ç–µ–ø–ª–µ–Ω–Ω—è / –µ–Ω–µ—Ä–≥–æ–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å</Label>
                   </div>
                    <div className="flex items-center space-x-2">
                     <Checkbox id="landscaping" checked={options.landscaping} onCheckedChange={() => handleOptionChange('landscaping')} />
                     <Label htmlFor="landscaping">‚úÖ –õ–∞–Ω–¥—à–∞—Ñ—Ç–Ω–∏–π –¥–∏–∑–∞–π–Ω</Label>
                   </div>
                   <div className="flex items-center space-x-2">
                     <Checkbox id="support" checked={options.support} onCheckedChange={() => handleOptionChange('support')} />
                     <Label htmlFor="support">‚úÖ –°—É–ø—Ä–æ–≤—ñ–¥/–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –ø—ñ—Å–ª—è –∑–¥–∞—á—ñ –æ–±'—î–∫—Ç–∞</Label>
                   </div>
                </div>
            </div>

            <div className="text-center pt-4">
              <Button size="lg" onClick={calculateCost}>–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å</Button>

              {result !== null && (
                <div className="mt-6 p-4 bg-green-100 border border-green-300 rounded-md">
                  <div className="text-xl font-bold text-green-800">
                    üí∞ –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–∞:
                  </div>
                  <div className="text-2xl font-semibold text-green-900 mt-2">
                    {result.toLocaleString('uk-UA', { style: 'currency', currency: 'UAH', minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                  </div>
                   <p className="text-sm text-gray-600 mt-3">
                    üîÑ –¶–µ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫. –¢–æ—á–Ω–∏–π –∫–æ—à—Ç–æ—Ä–∏—Å –±—É–¥–µ —Å–∫–ª–∞–¥–µ–Ω–æ –ø—ñ—Å–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –∑ –Ω–∞—à–∏–º —Ñ–∞—Ö—ñ–≤—Ü–µ–º.
                   </p>
                </div>
              )}
            </div>

             <div className="flex flex-col sm:flex-row justify-center gap-4 mt-6 pt-6 border-t">
                 <Button variant="outline">üîò –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é</Button>
                 <Button variant="default">üìû –ó–∞–º–æ–≤–∏—Ç–∏ –¥–∑–≤—ñ–Ω–æ–∫</Button>
             </div>

          </CardContent>
        </Card>
      </div>
    </section>
  );
}

export default CalculatorSection;